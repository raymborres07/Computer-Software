//BORRES, Raymond Tenorio 082140795
//Project 1 - Computer Software 1

#include <stdio.h>    //import stdio.h library for printf, scanf
#include <math.h>     //import math.h library for sqrt function

int main(void)
{
    //Initialization of variables
    double euler_pi=1;        //Initialize the value of pi as 1 for Euler's Solution.
    double gregleib_pi= 0;    //Initialize the value of pi as 0 for Gregory-Leibniz series.
    double nilakantha_pi= 3;  //Initialize the value of pi as 3 for Nilakantha's Infinite Series.
    double viete_pi= 1;       //Initialize the value of pi as 1 for Viete's Formula.
    double wallis_pi= 1;      //Initialize the value of pi as 1 for Wallis Product. 
    double factor_euler, sub_euler, factor_viete;   //Initialize factors used in loops for the approximations.
    double pi= 3.1415926535897932;                  //Initialize the value of pi in 16 variables to compare with the approximated value.
    double percentacc_elr, percentacc_gls, percentacc_nlk, percentacc_vte, percentacc_wls;      //Initialize the variable for the error rate. 
    double pidiff_elr, pidiff_gls, pidiff_nlk, pidiff_vte, pidiff_wls;                          //Initialize the difference between pi and the approximated value for error rate calculation.
    int count_euler, count_gregleib, count_nilakantha, count_viete, count_viete2, count_wallis; //Initialize the counters utilize for the loops in the approximations.
    int iteration;            //Initialize the number of iterations.
 
    printf("This program will approximate the value of pi based on 5 different infinite series algorithms based on the number of iterations provided.\n"); 
    printf("The algorithms used would be Euler's Solution, Gregory-Leibniz Series, Nilakantha's Infinite Series, Viete's Formula and Wallis Product.\n");
    printf("\nEnter the number of iterations: ");    
    scanf("%d",&iteration);                       //Scan the value provided for the iteration.
   
    //Euler's Solution Calculation
    for(count_euler=1 ; count_euler <= iteration; count_euler++){   //Loop condition, add 1 to the counter for every repetition of the loop until it is greater than the number of iterations.
        if(count_euler==1){                                        //If the counter is equal to one, the proceed to the next line.
           euler_pi=sqrt(6*(1/(count_euler*count_euler)));         //Euler_pi equals to square root of 6 times 1 divided by counter squared.
       }
       else{                                                       //Else if the counter is not equal to 1, then proceed to the next lines.
	    factor_euler=1.0/(count_euler*count_euler);                //Factor_euler is equal to 1/counter squared.
	    sub_euler=(euler_pi*euler_pi)/6.0;                         //Sub_euler would be the previous pi value multiplied to itself then multiplied to 6.
    	euler_pi=sqrt((sub_euler+factor_euler)*6.0);               //The euler_pi value is then calculated by taking the square root of the sum of sub_euler and factor_euler multiplied to 6.	
       }
    }
    printf("\nApproximated value of pi using Euler's Solution = %1.16lf",euler_pi);  //Print the value of the approximated calculation of pi using Euler's solution in 16 digits.
    pidiff_elr=pi-euler_pi;                        //To solve for the percent error rate, we find the actual difference between the actual value of pi in 16 digits and the approximated value of pi.
    if(pidiff_elr<0){                              //Since the percent error rate is an absolute value, if the difference is negative, then proceed to the next line.
       percentacc_elr=-1*((pidiff_elr/pi)*100);   //Error rate would be equal to negative one times the pidiff divided by pi times 100.
    }          
    else {                                         //If the difference is zero or positive, then proceed to the next line. 
       percentacc_elr=((pidiff_elr/pi)*100);      //Error rate would be equal to pidiff divided by pi times 100.
    }
    printf("\nError rate using Euler's Solution = %1.16lf\n", percentacc_elr); //Print the value of the error rate in 16 digits.
   
    //Gregory-Leibniz Series Calculation
    for(count_gregleib = 1; count_gregleib <= iteration; count_gregleib++){  //Loop condition, add 1 to the counter for every repetition of the loop until it is greater than the number of iterations.
       if(count_gregleib%2==1){                                             //If the counter is an odd number, then proceed to the next line.  
           gregleib_pi = gregleib_pi + (1.0/(2.0*count_gregleib-1.0));      //Gregleib_pi is equal to gregleib_pi plus the quotient between 1 and 2 times the counter minus 1.
       }
       else{                                                                //If the counter is an even number, then proceed to the next line.
           gregleib_pi = gregleib_pi - (1.0/(2.0*count_gregleib-1.0));      //Gregleib_pi is equal to gregleib_pi minus the quotient between 1 and 2 times the counter minus 1.
       }
    }
    gregleib_pi=gregleib_pi*4;                                               //The final value of gregleib_pi is equal to gregleib_pi multiplied by 4.
 
    printf("\nApproximated value of pi using Gregory-Leibniz Series = %1.16lf", gregleib_pi);  //Print the value of the approximated calculation of pi using Gregory-Leibniz Series in 16 digits.
    pidiff_gls=pi-gregleib_pi;                    //To solve for the percent error rate, we find the actual difference between the actual value of pi in 16 digits and the approximated value of pi.
    if(pidiff_gls<0){                             //Since the percent error rate is an absolute value, if the difference is negative, then proceed to the next line.
       percentacc_gls=-1*((pidiff_gls/pi)*100);  //Error rate would be equal to negative one times the pidiff divided by pi times 100.
    }
    else {                                        //If the difference is zero or positive, then proceed to the next line. 
       percentacc_gls=((pidiff_gls/pi)*100);     //Error rate would be equal to pidiff divided by pi times 100.
    }
    printf("\nError rate using Gregory-Leibniz Series = %1.16lf\n", percentacc_gls);  //Print the value of the error rate in 16 digits.
   
    //Nilakantha's Infinite Series Calculation
    for(count_nilakantha = 1; count_nilakantha <= iteration; count_nilakantha++){   //Loop condition, add 1 to the counter for every repetition of the loop until it is greater than the number of iterations.
    	if (count_nilakantha==1){                                                  //If the counter is equal to one, then proceed to the next line. 
    	    nilakantha_pi=3;                                                       //Set the value of nilakantha_pi as 3.
    	}
    	else if (count_nilakantha%2==1){                                           //If the counter is an odd number, then proceed to the next line.
    	    nilakantha_pi=nilakantha_pi-(4.0/((2*((double)count_nilakantha-1.0))*((2*((double)count_nilakantha-1.0))+1.0)*((2*((double)count_nilakantha-1.0))+2.0)));  //Nilakantha_pi would equal to itself minus (4 divided by (counter times 2 minus 1) times previous term plus one times previous term plus one).
    	}
    	else {                                                                     //If the counter is an even number, then proceed to the next line.
    	    nilakantha_pi=nilakantha_pi+(4.0/((2*((double)count_nilakantha-1.0))*((2*((double)count_nilakantha-1.0))+1.0)*((2*((double)count_nilakantha-1.0))+2.0)));  //Nilakantha_pi would equal to itself plus (4 divided by (counter times 2 minus 1) times previous term plus one times previous term plus one).
    	}
    }
    printf("\nApproximated value of pi using Nilakantha's Infinite Series = %1.16lf", nilakantha_pi);   //Print the value of the approximated calculation of pi using Nilakantha's Infinite Series in 16 digits.
    pidiff_nlk=pi-nilakantha_pi;                  //To solve for the percent error rate, we find the actual difference between the actual value of pi in 16 digits and the approximated value of pi.
    if(pidiff_nlk<0){                             //Since the percent error rate is an absolute value, if the difference is negative, then proceed to the next line.
       percentacc_nlk=-1*((pidiff_nlk/pi)*100);  //Error rate would be equal to negative one times the pidiff divided by pi times 100.
    }
    else {                                        //If the difference is zero or positive, then proceed to the next line. 
       percentacc_nlk=((pidiff_nlk/pi)*100);     //Error rate would be equal to pidiff divided by pi times 100.
    }
    printf("\nError rate using Nilakantha's Infinite Series = %1.16lf\n", percentacc_nlk);  //Print the value of the error rate in 16 digits.
   
    //Viete's Formula Calculation
    for(count_viete = iteration ; count_viete > 1; count_viete--){       //Loop condition, minus 1 to the counter for every repetition of the loop until it is less than 1.
      factor_viete=2;                                                   //Set the factor_viete as 2.
      for(count_viete2 = 1; count_viete2<count_viete; count_viete2++){  //Loop condition, add 1 to the 2nd counter for every repetition of the loop until it is greater than the value of the first counter. Since this is a loop within a loop, it is resetted and repeated everytime the outer loop repeats.
	     factor_viete=2+sqrt(factor_viete);                             //Factor_viete equals to 2 plus the square root of the factor_viete.
       }
      factor_viete=sqrt(factor_viete);                                  //Factor_viete outside of the inner loop is equal to the square of the factor_viete after one loop of the inner loop.
      viete_pi= viete_pi*factor_viete/2;                                //Viete_pi would be the product between viete_pi times factor_viete divided by 2.
     }
    viete_pi*=sqrt(2)/2;                                                //After the outer loop, the viete_pi would be equal to viete_pi times the square root of 2 times 2.
    viete_pi=2/viete_pi;                                                //The final value of viete_pi is equal to 2 divided by the value of viete_pi.
    printf("\nApproximated value of pi using Viete's Formula = %1.16lf", viete_pi);  //Print the value of the approximated calculation of pi using Viete's Formula in 16 digits.
    pidiff_vte=pi-viete_pi;                       //To solve for the percent error rate, we find the actual difference between the actual value of pi in 16 digits and the approximated value of pi.
    if(pidiff_vte<0){                             //Since the percent error rate is an absolute value, if the difference is negative, then proceed to the next line. 
       percentacc_vte=-1*((pidiff_vte/pi)*100);  //Error rate would be equal to negative one times the pidiff divided by pi times 100.
    }
    else {                                        //If the difference is zero or positive, then proceed to the next line. 
       percentacc_vte=((pidiff_vte/pi)*100);     //Error rate would be equal to pidiff divided by pi times 100.
    }
    printf("\nError rate using Viete's Formula = %1.16lf\n", percentacc_vte);  //Print the value of the error rate in 16 digits.
    
    //Wallis Product
    for(count_wallis = 1; count_wallis <= iteration; count_wallis++){        //Loop condition, add 1 to the counter for every repetition of the loop until it is greater than the number of iterations.
      if (count_wallis%2==1){                                               //If the counter is an odd number, then proceed to the next line.
         wallis_pi=wallis_pi*(((double)count_wallis+1.0)/(count_wallis));   //Wallis_pi is equal to wallis_pi multiplied to counter plus divided by the counter.
      }
      else {                                                                //If the counter is an even number, then proceed to the next line.
		 wallis_pi=wallis_pi*((count_wallis)/(count_wallis+1.0));           //Wallis_pi is equal to wallis_pi divided by wallis_pi plus 1
      }
     }
     wallis_pi=wallis_pi*2;                                                  //The final product of wallis_pi is equal to wallis_pi multiplied to 2.
     printf("\nApproximated value of pi using Wallis Product = %1.16lf", wallis_pi);  //Print the value of the approximated calculation of pi using Wallis Product in 16 digits.
     pidiff_wls=pi-wallis_pi;                     //To solve for the percent error rate, we find the actual difference between the actual value of pi in 16 digits and the approximated value of pi.
     if(pidiff_wls<0){                            //Since the percent error rate is an absolute value, if the difference is negative, then proceed to the next line.
       percentacc_wls=-1*((pidiff_wls/pi)*100);  //Error rate would be equal to negative one times the pidiff divided by pi times 100.
     } 
     else {                                       //If the difference is zero or positive, then proceed to the next line. 
       percentacc_wls=((pidiff_wls/pi)*100);     //Error rate would be equal to pidiff divided by pi times 100.
     }
     printf("\nError rate using Wallis Product = %1.16lf\n", percentacc_wls);  //Print the value of the error rate in 16 digits.
     }
